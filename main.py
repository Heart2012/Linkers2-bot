import os
import json
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
API_TOKEN = os.getenv("API_TOKEN")
ADMINS = [int(os.getenv("ADMIN_ID", 0))]           # ID –∞–¥–º–∏–Ω–æ–≤
OUTPUT_CHANNEL_ID = int(os.getenv("OUTPUT_CHANNEL_ID", 0))  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

if not API_TOKEN or not OUTPUT_CHANNEL_ID:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API_TOKEN –∏ OUTPUT_CHANNEL_ID –≤ Render ‚Üí Environment")
    exit(1)

# ================== –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ==================
CHANNELS = [
    {"name": "–ö–∏—ó–≤/–æ–±–ª.", "id": -1002497921892},
    {"name": "–•–∞—Ä–∫—ñ–≤/–æ–±–ª.", "id": -1002282062694},
    {"name": "–û–¥–µ—Å–∞/–æ–±–ª.", "id": -1002378112112},
    {"name": "–î–Ω—ñ–ø—Ä–æ/–æ–±–ª.", "id": -1002469953491},
    {"name": "–õ—å–≤—ñ–≤/–æ–±–ª.", "id": -1002462683862},
    {"name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è/–æ–±–ª.", "id": -1002478382347},
    {"name": "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "id": -1002479247381},
    {"name": "–ú–∏–∫–æ–ª–∞—ó–≤/–æ–±–ª.", "id": -1002263502869},
    {"name": "–í—ñ–Ω–Ω–∏—Ü—è/–æ–±–ª.", "id": -1002408714452},
    {"name": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤/–æ–±–ª.", "id": -1002446393799},
    {"name": "–ü–æ–ª—Ç–∞–≤–∞/–æ–±–ª.", "id": -1002175469997},
    {"name": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002429587845},
    {"name": "–ß–µ—Ä–∫–∞—Å–∏/–æ–±–ª.", "id": -1002400669760},
    {"name": "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ/–æ–±–ª.", "id": -1002235399302},
    {"name": "–ñ–∏—Ç–æ–º–∏—Ä/–æ–±–ª.", "id": -1002330195140},
    {"name": "–°—É–º–∏/–æ–±–ª.", "id": -1002445729693},
    {"name": "–†—ñ–≤–Ω–µ/–æ–±–ª.", "id": -1002380253993},
    {"name": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫/–æ–±–ª.", "id": -1002375309618},
    {"name": "–•–µ—Ä—Å–æ–Ω/–æ–±–ª.", "id": -1002418416457},
    {"name": "–£–∂–≥–æ—Ä–æ–¥/–æ–±–ª.", "id": -1002451310310},
    {"name": "–ö—Ä–µ–º–µ–Ω—á—É–∫", "id": -1002261835375},
    {"name": "–õ—É—Ü—å–∫/–æ–±–ª.", "id": -1002293307493},
    {"name": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å/–æ–±–ª.", "id": -1002363870955},
    {"name": "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002288269113},
    {"name": "‚ö°Ô∏è–û–ü–ï–†–ê–¢–ò–í–ù–Ü –ù–û–í–ò–ù–ò –£–ö–†–ê–á–ù–ò 24/7‚ö°Ô∏è", "id": -1002666646029},
]

LINKS_FILE = "links.json"

# ================== –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ ==================
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ================== –†–∞–±–æ—Ç–∞ —Å JSON ==================
def load_links():
    if os.path.exists(LINKS_FILE):
        with open(LINKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_links(links):
    with open(LINKS_FILE, "w", encoding="utf-8") as f:
        json.dump(links, f, ensure_ascii=False, indent=2)

# ================== –•–µ–Ω–¥–ª–µ—Ä—ã ==================
@dp.message(Command("newlink"))
async def new_link(message: Message):
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Å—ã–ª–∫–∏ —Å –∑–∞—è–≤–∫–æ–π"""
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫")
        return

    link_name = f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.full_name}"
    created_links = []

    for ch in CHANNELS:
        try:
            invite = await bot.create_chat_invite_link(
                chat_id=ch["id"],
                name=link_name,
                creates_join_request=True   # ‚ùóÔ∏è –ó–∞–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞ —Å –∑–∞—è–≤–∫–æ–π
            )
            created_links.append({"name": ch["name"], "url": invite.invite_link})
        except Exception as e:
            created_links.append({"name": ch["name"], "url": f"‚ùå {e}"})

    save_links(created_links)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    text = "üîó –ü–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–∫—Ä–∏—Ç—ñ –ª—ñ–Ω–∫–∏ —ñ–∑ –∑–∞—è–≤–∫–æ—é:\n\n"
    text += "\n".join([f"{item['name']} ‚Üí {item['url']}" for item in created_links])
    await message.answer(text)

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª
    await bot.send_message(OUTPUT_CHANNEL_ID, text)


@dp.message(Command("alllinks"))
async def all_links(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    saved = load_links()
    if not saved:
        await message.answer("‚ÑπÔ∏è –õ—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î")
        return

    text = "üìÇ –£—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ª—ñ–Ω–∫–∏:\n\n"
    text += "\n".join([f"{item['name']} ‚Üí {item['url']}" for item in saved])
    await message.answer(text)

# ================== –ó–∞–ø—É—Å–∫ ==================
async def main():
    # ‚ùóÔ∏è –£–¥–∞–ª—è–µ–º webhook, —á—Ç–æ–±—ã polling –∑–∞—Ä–∞–±–æ—Ç–∞–ª
    await bot.delete_webhook(drop_pending_updates=True)
    print("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
