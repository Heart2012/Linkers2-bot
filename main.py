import os
import json
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ API_TOKEN —É Render ‚Üí Environment")
    exit(1)

CHANNELS = [
    {"name": "–ö–∏—ó–≤/–æ–±–ª.", "id": -1002497921892},
    {"name": "–•–∞—Ä–∫—ñ–≤/–æ–±–ª.", "id": -1002282062694},
    {"name": "–û–¥–µ—Å–∞/–æ–±–ª.", "id": -1002378112112},
    {"name": "–î–Ω—ñ–ø—Ä–æ/–æ–±–ª.", "id": -1002469953491},
    {"name": "–õ—å–≤—ñ–≤/–æ–±–ª.", "id": -1002462683862},
    {"name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è/–æ–±–ª.", "id": -1002478382347},
    {"name": "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "id": -1002479247381},
    {"name": "–ú–∏–∫–æ–ª–∞—ó–≤/–æ–±–ª.", "id": -1002263502869},
    {"name": "–í—ñ–Ω–Ω–∏—Ü—è/–æ–±–ª.", "id": -1002408714452},
    {"name": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤/–æ–±–ª.", "id": -1002446393799},
    {"name": "–ü–æ–ª—Ç–∞–≤–∞/–æ–±–ª.", "id": -1002175469997},
    {"name": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002429587845},
    {"name": "–ß–µ—Ä–∫–∞—Å–∏/–æ–±–ª.", "id": -1002400669760},
    {"name": "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ/–æ–±–ª.", "id": -1002235399302},
    {"name": "–ñ–∏—Ç–æ–º–∏—Ä/–æ–±–ª.", "id": -1002330195140},
    {"name": "–°—É–º–∏/–æ–±–ª.", "id": -1002445729693},
    {"name": "–†—ñ–≤–Ω–µ/–æ–±–ª.", "id": -1002380253993},
    {"name": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫/–æ–±–ª.", "id": -1002375309618},
    {"name": "–•–µ—Ä—Å–æ–Ω/–æ–±–ª.", "id": -1002418416457},
    {"name": "–£–∂–≥–æ—Ä–æ–¥/–æ–±–ª.", "id": -1002451310310},
    {"name": "–ö—Ä–µ–º–µ–Ω—á—É–∫", "id": -1002261835375},
    {"name": "–õ—É—Ü—å–∫/–æ–±–ª.", "id": -1002293307493},
    {"name": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å/–æ–±–ª.", "id": -1002363870955},
    {"name": "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002288269113},
    {"name": "‚ö°Ô∏è–û–ü–ï–†–ê–¢–ò–í–ù–Ü –ù–û–í–ò–ù–ò –£–ö–†–ê–á–ù–ò 24/7‚ö°Ô∏è", "id": -1002666646029},
]

LINKS_FILE = "links.json"

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# ================== FSM ==================
class LinkStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_confirm = State()


# ================== –†–∞–±–æ—Ç–∞ —Å JSON ==================
def load_links():
    if os.path.exists(LINKS_FILE):
        with open(LINKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


def save_links(links):
    with open(LINKS_FILE, "w", encoding="utf-8") as f:
        json.dump(links, f, ensure_ascii=False, indent=2)


# ================== –•–µ–Ω–¥–ª–µ—Ä—ã ==================
@dp.message(Command("newlink"))
async def new_link(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        await ask_confirmation(message, state, args[1])
    else:
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª—ñ–Ω–∫—ñ–≤:")
        await state.set_state(LinkStates.waiting_for_name)


@dp.message(LinkStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    link_name = message.text.strip()
    await ask_confirmation(message, state, link_name)


async def ask_confirmation(message: Message, state: FSMContext, link_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    await state.update_data(link_name=link_name)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏", callback_data="confirm_yes")
    kb.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="confirm_no")
    kb.adjust(2)

    await message.answer(
        f"–¢–∏ –≤–≤—ñ–≤ –Ω–∞–∑–≤—É: <b>{link_name}</b>\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–Ω–∫—ñ–≤?",
        reply_markup=kb.as_markup()
    )
    await state.set_state(LinkStates.waiting_for_confirm)


@dp.callback_query(LinkStates.waiting_for_confirm, F.data == "confirm_yes")
async def confirm_yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    link_name = data.get("link_name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")

    await generate_links(callback.message, link_name)
    await state.clear()
    await callback.answer("‚úÖ –õ—ñ–Ω–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")


@dp.callback_query(LinkStates.waiting_for_confirm, F.data == "confirm_no")
async def confirm_no(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–Ω–∫—ñ–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    await callback.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")


async def generate_links(message: Message, link_name: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫"""
    created_links = []
    for ch in CHANNELS:
        try:
            invite = await bot.create_chat_invite_link(
                chat_id=ch["id"],
                name=link_name,
                creates_join_request=True
            )
            created_links.append({"name": ch["name"], "url": invite.invite_link})
        except Exception as e:
            created_links.append({"name": ch["name"], "url": f"‚ùå {e}"})

    save_links(created_links)

    text = f"üîó –ü–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–∫—Ä–∏—Ç—ñ –ª—ñ–Ω–∫–∏ —ñ–∑ –∑–∞—è–≤–∫–æ—é <b>{link_name}</b>:\n\n"
    lines = []
    for i in range(0, len(created_links), 3):
        group = created_links[i:i+3]
        line = " | ".join([f"{item['name']} - {item['url']}" for item in group])
        lines.append(line)
    text += "\n".join(lines)
    await message.answer(text)


@dp.message(Command("alllinks"))
async def all_links(message: Message):
    saved = load_links()
    if not saved:
        await message.answer("‚ÑπÔ∏è –õ—ñ–Ω–∫—ñ–≤ —â–µ –Ω–µ–º–∞—î")
        return

    text = "üìÇ –£—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ª—ñ–Ω–∫–∏:\n\n"
    lines = []
    for i in range(0, len(saved), 3):
        group = saved[i:i+3]
        line = " | ".join([f"{item['name']} - {item['url']}" for item in group])
        lines.append(line)
    text += "\n".join(lines)
    await message.answer(text)


# ================== –ó–∞–ø—É—Å–∫ ==================
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ polling")
    await bot.delete_webhook(drop_pending_updates=True)  # –£–±–∏—Ä–∞–µ–º webhook
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
