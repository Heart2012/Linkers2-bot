import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

# ================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==================
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ API_TOKEN —É Render ‚Üí Environment")
    exit(1)

# –ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤
CHANNELS = [
    {"name": "–ö–∏—ó–≤/–æ–±–ª.", "id": -1002497921892},
    {"name": "–•–∞—Ä–∫—ñ–≤/–æ–±–ª.", "id": -1002282062694},
    {"name": "–û–¥–µ—Å–∞/–æ–±–ª.", "id": -1002378112112},
    {"name": "–î–Ω—ñ–ø—Ä–æ/–æ–±–ª.", "id": -1002469953491},
    {"name": "–õ—å–≤—ñ–≤/–æ–±–ª.", "id": -1002462683862},
    {"name": "–ó–∞–ø–æ—Ä—ñ–∂–∂—è/–æ–±–ª.", "id": -1002478382347},
    {"name": "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "id": -1002479247381},
    {"name": "–ú–∏–∫–æ–ª–∞—ó–≤/–æ–±–ª.", "id": -1002263502869},
    {"name": "–í—ñ–Ω–Ω–∏—Ü—è/–æ–±–ª.", "id": -1002408714452},
    {"name": "–ß–µ—Ä–Ω—ñ–≥—ñ–≤/–æ–±–ª.", "id": -1002446393799},
    {"name": "–ü–æ–ª—Ç–∞–≤–∞/–æ–±–ª.", "id": -1002175469997},
    {"name": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002429587845},
    {"name": "–ß–µ—Ä–∫–∞—Å–∏/–æ–±–ª.", "id": -1002400669760},
    {"name": "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ/–æ–±–ª.", "id": -1002235399302},
    {"name": "–ñ–∏—Ç–æ–º–∏—Ä/–æ–±–ª.", "id": -1002330195140},
    {"name": "–°—É–º–∏/–æ–±–ª.", "id": -1002445729693},
    {"name": "–†—ñ–≤–Ω–µ/–æ–±–ª.", "id": -1002380253993},
    {"name": "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫/–æ–±–ª.", "id": -1002375309618},
    {"name": "–•–µ—Ä—Å–æ–Ω/–æ–±–ª.", "id": -1002418416457},
    {"name": "–£–∂–≥–æ—Ä–æ–¥/–æ–±–ª.", "id": -1002451310310},
    {"name": "–ö—Ä–µ–º–µ–Ω—á—É–∫", "id": -1002261835375},
    {"name": "–õ—É—Ü—å–∫/–æ–±–ª.", "id": -1002293307493},
    {"name": "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å/–æ–±–ª.", "id": -1002363870955},
    {"name": "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π/–æ–±–ª.", "id": -1002288269113},
    {"name": "‚ö°Ô∏è–û–ü–ï–†–ê–¢–ò–í–ù–Ü –ù–û–í–ò–ù–ò –£–ö–†–ê–á–ù–ò 24/7‚ö°Ô∏è", "id": -1002666646029},
]

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ================== –•–µ–Ω–¥–ª–µ—Ä ==================
@dp.message(Command("newlink"))
async def new_link(message: Message):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–∫—Ä–∏—Ç—ñ –ª—ñ–Ω–∫–∏ —ñ–∑ –∑–∞—è–≤–∫–æ—é"""
    link_name = f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.full_name}"

    created_links = []
    for ch in CHANNELS:
        try:
            invite = await bot.create_chat_invite_link(
                chat_id=ch["id"],
                name=link_name,
                creates_join_request=True  # ‚ùóÔ∏è –ø–æ—Å—Ç—ñ–π–Ω–∞ –∑–∞–∫—Ä–∏—Ç–∞ –∑–∞—è–≤–∫–∞
            )
            created_links.append(f"{ch['name']} ‚Üí {invite.invite_link}")
        except Exception as e:
            created_links.append(f"‚ùå {ch['name']} ‚Üí {e}")

    text = "üîó –ü–æ—Å—Ç—ñ–π–Ω—ñ –∑–∞–∫—Ä–∏—Ç—ñ –ª—ñ–Ω–∫–∏ —ñ–∑ –∑–∞—è–≤–∫–æ—é:\n\n" + "\n".join(created_links)
    await message.answer(text)


# ================== –ó–∞–ø—É—Å–∫ ==================
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ polling (Render Web Service)")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
